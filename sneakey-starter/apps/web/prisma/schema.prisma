generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ─────────────── MODELS ─────────────── */

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?

  // Membre d'une org (facultatif)
  orgId         String?
  org           Organization? @relation("MemberOfOrg", fields: [orgId], references: [id])

  // Propriétaire (owner) de 0..n organisations
  organizationsOwned Organization[] @relation("OwnerOfOrg")

  role          Role     @default(MEMBER)
  devices       Device[]
  subscriptions Subscription[]
  createdAt     DateTime @default(now())
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model Organization {
  id        String  @id @default(cuid())
  name      String

  // Propriétaire unique (owner)
  ownerId   String
  owner     User    @relation("OwnerOfOrg", fields: [ownerId], references: [id])

  // Membres (liste de users)
  members   User[]  @relation("MemberOfOrg")

  policies  Policy[]
  devices   Device[]
  createdAt DateTime @default(now())
}

model Device {
  id         String         @id @default(cuid())
  orgId      String
  org        Organization   @relation(fields: [orgId], references: [id])
  userId     String?
  user       User?          @relation(fields: [userId], references: [id])
  name       String
  platform   String         // win | mac | linux
  lastSeenAt DateTime?
  version    String?
  status     DeviceStatus   @default(OFFLINE)
  tokenHash  String
  createdAt  DateTime       @default(now())
}

enum DeviceStatus {
  ONLINE
  OFFLINE
  PAUSED
}

model Policy {
  id            String   @id @default(cuid())
  orgId         String
  org           Organization @relation(fields: [orgId], references: [id])
  name          String
  mode          PolicyMode
  intervalMin   Int
  intervalMax   Int
  pixelMin      Int
  pixelMax      Int
  schedule      Json
  wifiBlocklist String[]
  appBlocklist  String[]
  createdAt     DateTime @default(now())
}

enum PolicyMode {
  PRESENTATION
  RENDER
  CUSTOM
}

model Subscription {
  id        String        @id @default(cuid())
  orgId     String
  org       Organization  @relation(fields: [orgId], references: [id])
  stripeId  String        @unique
  status    String        // active | past_due | canceled
  tier      String        // free | pro | team
  seats     Int
  createdAt DateTime      @default(now())
}

model EventLog {
  id       String   @id @default(cuid())
  deviceId String
  device   Device   @relation(fields: [deviceId], references: [id])
  ts       DateTime @default(now())
  kind     String   // online, policy_applied, move, pause, error
  detail   Json
}
